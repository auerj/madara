
#ifndef   _TRANSPORT_MYTRANSPORTREADTHREAD_H_
#define   _TRANSPORT_MYTRANSPORTREADTHREAD_H_

#include <string>

#include "madara/threads/BaseThread.h"

namespace transports
{
  /**
  * A custom read thread generated by gpc.pl
  **/
  class MyTransportReadThread : public madara::threads::BaseThread
  {
  public:
    /**
     * Default constructor
     **/
    MyTransportReadThread (
      const std::string & id,
      const madara::transport::TransportSettings & settings,
      madara::transport::BandwidthMonitor & send_monitor,
      madara::transport::BandwidthMonitor & receive_monitor,
      madara::transport::PacketScheduler & packet_scheduler);
    
    /**
     * Destructor
     **/
    virtual ~MyTransportReadThread ();
    
    /**
      * Initializes thread with MADARA context
      * @param   kb   context for querying current program state
      **/
    virtual void init (madara::knowledge::KnowledgeBase & kb);

    /**
      * Executes the main thread logic
      **/
    virtual void run (void);

  private:
    /// data plane if we want to access the knowledge base
    madara::knowledge::ThreadSafeContext * context_;
    
    /// the unique id of this agent (probably a host:port pairing)
    const std::string id_;
    
    /// the transport settings being used
    madara::transport::QoSTransportSettings settings_;
    
    /// buffer for sending
    madara::utility::ScopedArray <char>      buffer_;

    /// data received rules, defined in Transport settings
    madara::knowledge::CompiledExpression  on_data_received_;
      
    /// monitor the bandwidth used for sending
    madara::transport::BandwidthMonitor & send_monitor_;
    
    /// monitor the bandwidth used by others
    madara::transport::BandwidthMonitor & receive_monitor_;
    
    /// a specialty packet scheduler for experimental drop policies
    madara::transport::PacketScheduler & packet_scheduler_;
  };
} // end namespace threads

#endif // _TRANSPORT_MYTRANSPORTREADTHREAD_H_
